{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/nikivi/src/orgs/learn-anything/learn-anything/app/src/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    link {\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport { useQuery } from \"urql\";\nvar queryTopics = gql(_templateObject());\n\nvar IndexPage = function IndexPage() {\n  _s();\n\n  var _useQuery = useQuery({\n    query: queryTopics\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0];\n\n  if (result.fetching || !result.data) {\n    return null;\n  }\n\n  if (result.error) {\n    return null;\n  }\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"Learn Anything\"), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, result));\n};\n\n_s(IndexPage, \"ZX70jukugySlrGBSVPWFe8Pvtlo=\", false, function () {\n  return [useQuery];\n});\n\n_c = IndexPage;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/Users/nikivi/src/orgs/learn-anything/learn-anything/app/src/pages/index.tsx"],"names":["gql","React","useQuery","queryTopics","IndexPage","query","result","fetching","data","error"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,MAAzB;AAEA,IAAMC,WAAW,GAAGH,GAAH,mBAAjB;;AAgBA,IAAMI,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAAA,kBACLF,QAAQ,CAAY;AACnCG,IAAAA,KAAK,EAAEF;AAD4B,GAAZ,CADH;AAAA;AAAA,MACfG,MADe;;AAKtB,MAAIA,MAAM,CAACC,QAAP,IAAmB,CAACD,MAAM,CAACE,IAA/B,EAAqC;AACnC,WAAO,IAAP;AACD;;AAED,MAAIF,MAAM,CAACG,KAAX,EAAkB;AAChB,WAAO,IAAP;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,MADH,CAFF,CADF;AAWD,CAxBD;;GAAMF,S;UACaF,Q;;;KADbE,S;AA0BN,eAAeA,SAAf","sourcesContent":["import gql from \"graphql-tag\"\nimport React from \"react\"\nimport { useQuery } from \"urql\"\n\nconst queryTopics = gql`\n  query {\n    link {\n      name\n    }\n  }\n`\n\ninterface TopicData {\n  topics: Topic[]\n}\n\ninterface Topic {\n  key: string\n}\n\nconst IndexPage = () => {\n  const [result] = useQuery<TopicData>({\n    query: queryTopics,\n  })\n\n  if (result.fetching || !result.data) {\n    return null\n  }\n\n  if (result.error) {\n    return null\n  }\n\n  return (\n    <div>\n      <h1>Learn Anything</h1>\n      <ul>\n        {result}\n        {/* {result.data.topics.map((topic) => (\n          <li>{topic.key}</li>\n        ))} */}\n      </ul>\n    </div>\n  )\n}\n\nexport default IndexPage\n"]},"metadata":{},"sourceType":"module"}
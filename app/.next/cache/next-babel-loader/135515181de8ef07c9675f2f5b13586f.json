{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/nikivi/src/orgs/learn-anything/learn-anything/app/src/components/link.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($id: uuid!) {\\n    links_by_pk(id: $id) {\\n      name\\n      comment\\n      url\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery, useMutation } from \"urql\";\nimport { deleteLinkMutation } from \"../lib/mutations\";\nimport { Bookmark } from \"./icons\";\nimport { Button, Stack } from \"@chakra-ui/core\";\nvar linkQuery = gql(_templateObject());\n\nvar Link = function Link(_ref) {\n  _s();\n\n  var _result$data;\n\n  var id = _ref.id;\n\n  var _useQuery = useQuery({\n    query: linkQuery,\n    variables: {\n      id: id\n    }\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0];\n\n  var link = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.links_by_pk; // TODO: Grab state from user query\n\n  var _useState = useState(false),\n      saved = _useState[0],\n      setSaved = _useState[1];\n\n  var _useMutation = useMutation(deleteLinkMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      removeLinkResult = _useMutation2[0],\n      removeLink = _useMutation2[1];\n\n  return __jsx(Stack, {\n    marginBottom: \"4px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    href: link.url,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, link.name), __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      flex: 1,\n      justifyContent: \"flex-end\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: function onClick(e) {\n      return removeLink({\n        id: id\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, \"Delete\"))), __jsx(\"blockquote\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, link.comment), __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      marginTop: \"var(--small-gap)\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    onClick: function onClick(e) {\n      return setSaved(!saved);\n    },\n    style: {\n      cursor: \"pointer\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, __jsx(Bookmark, {\n    fill: \"\".concat(saved ? \"currentColor\" : \"none\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  })), __jsx(\"span\", {\n    style: {\n      fontStyle: \"italic\",\n      color: \"var(--gray)\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, link.url.split(\"/\")[2])));\n};\n\n_s(Link, \"2x7TU/tRb0UTQBL+1OfqGVJI5ik=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = Link;\nexport default Link;\n\nvar _c;\n\n$RefreshReg$(_c, \"Link\");","map":{"version":3,"sources":["/Users/nikivi/src/orgs/learn-anything/learn-anything/app/src/components/link.tsx"],"names":["React","useState","gql","useQuery","useMutation","deleteLinkMutation","Bookmark","Button","Stack","linkQuery","Link","id","query","variables","result","link","data","links_by_pk","saved","setSaved","removeLinkResult","removeLink","display","url","name","flex","justifyContent","e","comment","marginTop","cursor","fontStyle","color","split"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport gql from \"graphql-tag\"\nimport { useQuery, useMutation } from \"urql\"\nimport { deleteLinkMutation } from \"../lib/mutations\"\nimport { Bookmark } from \"./icons\"\nimport { Button, Stack } from \"@chakra-ui/core\"\n\nconst linkQuery = gql`\n  query($id: uuid!) {\n    links_by_pk(id: $id) {\n      name\n      comment\n      url\n    }\n  }\n`\n\nconst Link = ({ id }) => {\n  const [result] = useQuery({\n    query: linkQuery,\n    variables: { id },\n  })\n  const link = result?.data?.links_by_pk\n\n  // TODO: Grab state from user query\n  const [saved, setSaved] = useState(false)\n\n  const [removeLinkResult, removeLink] = useMutation(deleteLinkMutation)\n\n  return (\n    <Stack marginBottom=\"4px\">\n      <div style={{ display: \"flex\" }}>\n        <a href={link.url}>{link.name}</a>\n        {/* TODO: Only show for users with correct permissions */}\n        <div\n          style={{\n            display: \"flex\",\n            flex: 1,\n            justifyContent: \"flex-end\",\n          }}\n        >\n          <Button onClick={(e) => removeLink({ id })}>Delete</Button>\n        </div>\n      </div>\n      <blockquote>{link.comment}</blockquote>\n      <div style={{ display: \"flex\", marginTop: \"var(--small-gap)\" }}>\n        <span onClick={(e) => setSaved(!saved)} style={{ cursor: \"pointer\" }}>\n          <Bookmark fill={`${saved ? \"currentColor\" : \"none\"}`} />\n        </span>\n        {/* {` / `} */}\n        <span style={{ fontStyle: \"italic\", color: \"var(--gray)\" }}>\n          {link.url.split(\"/\")[2]}\n        </span>\n      </div>\n    </Stack>\n  )\n}\n\nexport default Link\n"]},"metadata":{},"sourceType":"module"}
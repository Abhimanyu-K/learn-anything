{
  "ast": null,
  "code": "var _jsxFileName = \"/Users/nikivi/src/orgs/learn-anything/learn-anything/app/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport { useQuery } from \"urql\";\nconst queryTopics = gql`\n  query {\n    topics {\n      key\n    }\n  }\n`;\nconst query = gql`\n  query {\n    link {\n      name\n    }\n  }\n`; // interface TopicData {\n//   topics: Topic[];\n// }\n\nconst IndexPage = () => {\n  const [result] = useQuery({\n    query: query\n  });\n\n  if (result.fetching || !result.data) {\n    return null;\n  }\n\n  if (result.error) {\n    return null;\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"Learn Anything\"), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, result.data.topics.map(topic => __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, topic.key))));\n};\n\nexport default IndexPage;",
  "map": {
    "version": 3,
    "sources": [
      "/Users/nikivi/src/orgs/learn-anything/learn-anything/app/pages/index.tsx"
    ],
    "names": [
      "gql",
      "React",
      "useQuery",
      "queryTopics",
      "query",
      "IndexPage",
      "result",
      "fetching",
      "data",
      "error",
      "topics",
      "map",
      "topic",
      "key"
    ],
    "mappings": ";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,MAAzB;AAEA,MAAMC,WAAW,GAAGH,GAAI;;;;;;CAAxB;AAQA,MAAMI,KAAK,GAAGJ,GAAI;;;;;;CAAlB,C,CAQA;AACA;AACA;;AAMA,MAAMK,SAAS,GAAG,MAAM;AACtB,QAAM,CAACC,MAAD,IAAWJ,QAAQ,CAAC;AACxBE,IAAAA,KAAK,EAAEA;AADiB,GAAD,CAAzB;;AAIA,MAAIE,MAAM,CAACC,QAAP,IAAmB,CAACD,MAAM,CAACE,IAA/B,EAAqC;AACnC,WAAO,IAAP;AACD;;AAED,MAAIF,MAAM,CAACG,KAAX,EAAkB;AAChB,WAAO,IAAP;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,MAAM,CAACE,IAAP,CAAYE,MAAZ,CAAmBC,GAAnB,CAAwBC,KAAD,IACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAK,CAACC,GAAX,CADD,CADH,CAFF,CADF;AAUD,CAvBD;;AAyBA,eAAeR,SAAf",
    "sourcesContent": [
      "import gql from \"graphql-tag\";\nimport React from \"react\";\nimport { useQuery } from \"urql\";\n\nconst queryTopics = gql`\n  query {\n    topics {\n      key\n    }\n  }\n`;\n\nconst query = gql`\n  query {\n    link {\n      name\n    }\n  }\n`;\n\n// interface TopicData {\n//   topics: Topic[];\n// }\n\ninterface Topic {\n  key: string;\n}\n\nconst IndexPage = () => {\n  const [result] = useQuery({\n    query: query,\n  });\n\n  if (result.fetching || !result.data) {\n    return null;\n  }\n\n  if (result.error) {\n    return null;\n  }\n\n  return (\n    <div>\n      <h1>Learn Anything</h1>\n      <ul>\n        {result.data.topics.map((topic) => (\n          <li>{topic.key}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default IndexPage;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
